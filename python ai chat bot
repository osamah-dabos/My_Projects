import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import aiohttp

# Replace with your actual tokens
TELEGRAM_BOT_TOKEN =
DEEPSEEK_TOKEN = 
DEEPSEEK_API_ENDPOINT = 

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Hello! I am your AI assistant.')

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    await update.message.reply_text('Thinking...')

    headers = {
        'Authorization': f'Bearer {DEEPSEEK_TOKEN}',
        'Content-Type': 'application/json'
    }
    data = {
        "model": "deepseek-chat",  # Required: Specify the model
        "messages": [
            {"role": "system", "content": "You are a helpful assistant."},  # System message
            {"role": "user", "content": user_message}  # User message
        ],
        "stream": False  # Optional: Set to True for streaming responses
    }

    logger.info(f"Sending payload: {data}")  # Log the payload

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(DEEPSEEK_API_ENDPOINT, headers=headers, json=data, timeout=30) as response:
                response_data = await response.json()
                logger.info(f"API Response: {response_data}")  # Log the full response
                if response.status == 200:
                    ai_response = response_data['choices'][0]['message']['content']  # Extract the AI's response
                    await update.message.reply_text(ai_response)
                else:
                    error_message = response_data.get('error', {}).get('message', 'Unknown error occurred.')
                    await update.message.reply_text(f'API Error: {error_message} (Status: {response.status})')
        except Exception as e:
            logger.error(f'Error during API request: {e}')
            await update.message.reply_text('An error occurred while processing your request.')

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling()

if __name__ == '__main__':
    main()
